const { ApiManagementClient } = require('@azure/arm-apimanagement');
const { DefaultAzureCredential } = require('@azure/identity');
require('dotenv').config();

async function createSubscription() {
    console.log('üîë Creating API Subscription');
    console.log('============================\n');

    try {
        // Authentication
        console.log('üîê Authenticating with Azure...');
        const credential = new DefaultAzureCredential();
        const client = new ApiManagementClient(credential, process.env.AZURE_SUBSCRIPTION_ID);
        
        const resourceGroupName = process.env.AZURE_APIM_RESOURCE_GROUP;
        const serviceName = process.env.AZURE_APIM_SERVICE_NAME;
        
        console.log(`üéØ Target APIM: ${serviceName} in ${resourceGroupName}`);
        console.log('');

        // Subscription configuration
        const subscriptionId = 'petstore-subscription';
        const productId = 'store'; // The Store product that contains the PetStore API
        
        const subscriptionData = {
            displayName: 'PetStore API Subscription',
            scope: `/products/${productId}`,
            state: 'active',
            allowTracing: true,
            ownerId: null, // Will be set to the user creating it
            notificationDate: null,
            expirationDate: null,
            stateComment: 'Subscription for accessing PetStore API operations'
        };

        console.log('üîë Creating Subscription');
        console.log('========================');
        console.log(`üìù Display Name: ${subscriptionData.displayName}`);
        console.log(`üÜî Subscription ID: ${subscriptionId}`);
        console.log(`üì¶ Product Scope: ${productId}`);
        console.log(`üìä State: ${subscriptionData.state}`);
        console.log(`üîç Allow Tracing: ${subscriptionData.allowTracing}`);
        console.log('');

        // Check if subscription already exists
        console.log('üîç Checking if subscription already exists...');
        let subscriptionExists = false;
        try {
            await client.subscription.get(resourceGroupName, serviceName, subscriptionId);
            subscriptionExists = true;
            console.log('‚ö†Ô∏è Subscription already exists. Updating...');
        } catch (error) {
            if (error.statusCode === 404) {
                console.log('‚úÖ Subscription does not exist. Creating new subscription...');
            } else {
                throw error;
            }
        }

        // Verify the product exists
        console.log(`üîç Verifying product exists: ${productId}`);
        try {
            const product = await client.product.get(resourceGroupName, serviceName, productId);
            console.log(`‚úÖ Product found: ${product.displayName}`);
        } catch (error) {
            if (error.statusCode === 404) {
                console.error(`‚ùå Product "${productId}" not found. Please ensure the product exists before creating a subscription.`);
                return;
            } else {
                throw error;
            }
        }

        // Create or update subscription
        if (subscriptionExists) {
            console.log('üîÑ Updating existing subscription...');
            await client.subscription.createOrUpdate(
                resourceGroupName,
                serviceName,
                subscriptionId,
                subscriptionData
            );
            console.log('‚úÖ Subscription updated successfully!');
        } else {
            console.log('üÜï Creating new subscription...');
            await client.subscription.createOrUpdate(
                resourceGroupName,
                serviceName,
                subscriptionId,
                subscriptionData
            );
            console.log('‚úÖ Subscription created successfully!');
        }

        console.log('');

        // Get subscription details including keys
        console.log('üîç Retrieving subscription details...');
        const subscription = await client.subscription.get(resourceGroupName, serviceName, subscriptionId);
        
        console.log('üìã SUBSCRIPTION DETAILS:');
        console.log('========================');
        console.log(`üîë Subscription ID: ${subscription.name}`);
        console.log(`üìù Display Name: ${subscription.displayName}`);
        console.log(`üìä State: ${subscription.state}`);
        console.log(`üì¶ Scope: ${subscription.scope}`);
        console.log(`üìÖ Created Date: ${subscription.createdDate ? new Date(subscription.createdDate).toLocaleString() : 'N/A'}`);
        console.log(`üìÖ Start Date: ${subscription.startDate ? new Date(subscription.startDate).toLocaleString() : 'N/A'}`);
        console.log(`üìÖ End Date: ${subscription.endDate ? new Date(subscription.endDate).toLocaleString() : 'Never expires'}`);
        console.log(`üîç Allow Tracing: ${subscription.allowTracing}`);

        console.log('');

        // Get subscription keys
        console.log('üîë Retrieving subscription keys...');
        try {
            const keys = await client.subscriptionKeys.list(resourceGroupName, serviceName, subscriptionId);
            
            console.log('üîê SUBSCRIPTION KEYS:');
            console.log('====================');
            console.log(`üîë Primary Key: ${keys.primaryKey || 'Not available'}`);
            console.log(`üîë Secondary Key: ${keys.secondaryKey || 'Not available'}`);
            
            console.log('');
            console.log('üìù USAGE INSTRUCTIONS:');
            console.log('======================');
            console.log('To use the PetStore API, include one of the following headers in your requests:');
            console.log('');
            console.log('Header-based authentication:');
            console.log(`   Ocp-Apim-Subscription-Key: ${keys.primaryKey || '[PRIMARY_KEY]'}`);
            console.log('');
            console.log('Query parameter-based authentication:');
            console.log(`   ?subscription-key=${keys.primaryKey || '[PRIMARY_KEY]'}`);
            console.log('');
            console.log('Example API call:');
            console.log(`   curl -X GET "https://${serviceName}.azure-api.net/petstore/pet/1" \\`);
            console.log(`        -H "Ocp-Apim-Subscription-Key: ${keys.primaryKey || '[PRIMARY_KEY]'}"`);

        } catch (error) {
            console.warn('‚ö†Ô∏è Could not retrieve subscription keys:', error.message);
        }

        console.log('');

        // List APIs available through this subscription
        console.log('üîç Verifying API access...');
        try {
            const productApis = await client.productApi.listByProduct(
                resourceGroupName,
                serviceName,
                productId
            );
            
            console.log('üåê ACCESSIBLE APIs:');
            console.log('==================');
            for (const api of productApis) {
                console.log(`   üî∏ ${api.displayName || api.name}`);
                console.log(`      üÜî ID: ${api.name}`);
                if (api.serviceUrl) {
                    console.log(`      üåê Service URL: ${api.serviceUrl}`);
                }
                console.log('');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Could not verify API access:', error.message);
        }

        console.log('üéâ SUBSCRIPTION CREATION COMPLETED!');
        console.log('===================================');
        console.log('‚úÖ Subscription successfully created for PetStore API');
        console.log('‚úÖ Subscription keys generated and ready to use');
        console.log('‚úÖ API access verified');
        console.log('');
        console.log('üìù Next steps:');
        console.log('   ‚Ä¢ Use the subscription keys to access the PetStore API');
        console.log('   ‚Ä¢ Test API endpoints using the provided authentication');
        console.log('   ‚Ä¢ Monitor usage through Azure APIM analytics');
        console.log('   ‚Ä¢ Manage subscription settings in Azure Portal if needed');

    } catch (error) {
        console.error('‚ùå Error creating subscription:', error);
        
        if (error.statusCode) {
            console.error(`üîç HTTP Status: ${error.statusCode}`);
        }
        
        if (error.message) {
            console.error(`üí¨ Error Details: ${error.message}`);
        }

        console.log('');
        console.log('üîß Troubleshooting Tips:');
        console.log('   ‚Ä¢ Verify Azure credentials are properly configured');
        console.log('   ‚Ä¢ Check that the APIM service exists and is accessible');
        console.log('   ‚Ä¢ Ensure the "Store" product exists and contains the PetStore API');
        console.log('   ‚Ä¢ Verify you have sufficient permissions to create subscriptions');
        console.log('   ‚Ä¢ Make sure the product allows subscriptions (subscriptionRequired: true)');
        
        process.exit(1);
    }
}

// Run the function
createSubscription();